# simulate_pipeline.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ª–æ–≥–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ LLM.

–ó–∞–ø—É—Å–∫: python simulate_pipeline.py
"""

import asyncio
import httpx
import json
import time
from datetime import datetime
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏)
PORTS = {
    "google_sheets": 8200,
    "book_parser": 8001, 
    "gigachat_init": 8010,
    "llm_service": 8110
}

BASE_URL = "http://127.0.0.1"

def print_step(step_number: int, description: str):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —à–∞–≥–∞."""
    print(f"\n{'='*60}")
    print(f"–®–ê–ì {step_number}: {description}")
    print(f"{'='*60}")

def print_substep(description: str):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—à–∞–≥."""
    print(f"\n--- {description} ---")

async def simulate_google_sheets_data_receive():
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã.
    """
    print_step(1, "–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó GOOGLE SHEETS")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–∫–∞–∫ –±—É–¥—Ç–æ –ø—Ä–∏—à–ª–∏ –∏–∑ Google Sheets)
    test_form_data = {
        "row_id": "test_row_123",
        "–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏": "2025-05-29 11:50:00",
        "–†–∞–±–æ—á–∞—è –ø–æ—á—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤": "test@example.com",
        "–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ?": "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏—Ö",
        "–í–æ–ø—Ä–æ—Å 2: –ü–æ—á–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∞–∑–æ–≤–∏—Ç–µ 4 —É—Ä–æ–∫–∞?": "–£—Ä–æ–∫ 1: –Ω–µ –∫–∞–∂–¥—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ. –£—Ä–æ–∫ 2: –º–µ–∂–¥—É –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –±–æ–ª—å—à–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è. –£—Ä–æ–∫ 3: –ª—é–¥–∏ –Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ª—É—á—à–µ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –£—Ä–æ–∫ 4: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
        "–í–æ–ø—Ä–æ—Å 3: –ö–∞–∫ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É?": "–ù—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (row_id: {test_form_data['row_id']})")
    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len([k for k in test_form_data.keys() if k.startswith('–í–æ–ø—Ä–æ—Å')])}")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{BASE_URL}:{PORTS['google_sheets']}/sheets/receive-data",
                json=test_form_data,
                timeout=30.0
            )
            response.raise_for_status()
            result = response.json()
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            print(f"   Entry ID: {result.get('entry_id')}")
            print(f"   QA –ø–∞—Ä: {result.get('qa_pairs_count')}")
            
            return test_form_data["row_id"]
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

async def simulate_llm_processing_start(row_id: str):
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã.
    """
    print_step(2, "–ó–ê–ü–£–°–ö LLM –û–ë–†–ê–ë–û–¢–ö–ò")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º—ã {row_id}")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(
                f"{BASE_URL}:{PORTS['google_sheets']}/sheets/process-form/{row_id}",
                timeout=30.0
            )
            response.raise_for_status()
            result = response.json()
            
            print(f"‚úÖ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return False

async def check_processing_status(row_id: str, max_attempts: int = 10):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏.
    """
    print_step(3, "–ú–û–ù–ò–¢–û–†–ò–ù–ì –û–ë–†–ê–ë–û–¢–ö–ò")
    
    async with httpx.AsyncClient() as client:
        for attempt in range(max_attempts):
            try:
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})")
                
                response = await client.get(
                    f"{BASE_URL}:{PORTS['google_sheets']}/sheets/check-processing/{row_id}",
                    timeout=30.0
                )
                response.raise_for_status()
                result = response.json()
                
                processed = result.get('processed', False)
                print(f"   –°—Ç–∞—Ç—É—Å: {'–ó–∞–≤–µ—Ä—à–µ–Ω–æ' if processed else '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
                
                if processed:
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {result.get('last_updated', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    return True
                
                # –ï—Å–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∂–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                if attempt < max_attempts - 1:
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {3} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                    await asyncio.sleep(3)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                if attempt < max_attempts - 1:
                    await asyncio.sleep(2)
    
    print(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False

async def get_final_results(row_id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    print_step(4, "–ü–û–õ–£–ß–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    
    async with httpx.AsyncClient() as client:
        try:
            print(f"üìã –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã {row_id}")
            
            response = await client.get(
                f"{BASE_URL}:{PORTS['google_sheets']}/sheets/form-data/{row_id}",
                timeout=30.0
            )
            response.raise_for_status()
            result = response.json()
            
            if result.get('status') == 'success':
                form_data = result.get('data', {})
                qa_pairs = form_data.get('qa_pairs', [])
                
                print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã")
                print(f"   –§–æ—Ä–º–∞ ID: {form_data.get('row_id')}")
                print(f"   Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {form_data.get('user_email')}")
                print(f"   –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'–ó–∞–≤–µ—Ä—à–µ–Ω–∞' if form_data.get('processed') else '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Q&A –ø–∞—Ä: {len(qa_pairs)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∞—Ä
                print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
                for i, pair in enumerate(qa_pairs[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    question = pair.get('question', '')[:50] + '...' if len(pair.get('question', '')) > 50 else pair.get('question', '')
                    has_llm_response = bool(pair.get('llm_response'))
                    print(f"   {i}. {question}")
                    print(f"      LLM –æ—Ç–≤–µ—Ç: {'‚úÖ –ü–æ–ª—É—á–µ–Ω' if has_llm_response else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.get('message')}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return False

async def simulate_direct_llm_call():
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ LLM —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤.
    """
    print_step(5, "–ü–†–Ø–ú–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LLM –°–ï–†–í–ò–°–ê")
    
    test_question = {
        "question": "–≤–æ–ø—Ä–æ—Å: –ü–æ—á–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∞–∑–æ–≤–∏—Ç–µ 4 —É—Ä–æ–∫–∞ –æ –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ–≤–æ—Ä–∏—Ç –∞–≤—Ç–æ—Ä. –û—Ç–≤–µ—Ç: –£—Ä–æ–∫ –ø–µ—Ä–≤—ã–π: –Ω–µ –∫–∞–∂–¥—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. –£—Ä–æ–∫ 2: –º–µ–∂–¥—É –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –æ–≥—Ä–æ–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –£—Ä–æ–∫ 3: –ª—é–¥–∏ –Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ª—É—á—à–µ –±–µ–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. –£—Ä–æ–∫ 4: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."
    }
    
    print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å–µ—Ä–≤–∏—Å—É")
    print(f"   –í–æ–ø—Ä–æ—Å: {test_question['question'][:100]}...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                f"{BASE_URL}:{PORTS['llm_service']}/llm/full-reasoning",
                json=test_question,
                timeout=120.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è LLM
            )
            response.raise_for_status()
            result = response.json()
            
            answer = result.get('answer', '')
            print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
            if answer:
                lines = answer.split('\n')
                print(f"   –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞: {lines[0] if lines else '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'}")
                if len(lines) > 1:
                    print(f"   –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: {lines[1] if len(lines) > 1 else ''}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False

async def check_services_health():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏.
    """
    print_step(0, "–ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–û–í")
    
    services_status = {}
    
    async with httpx.AsyncClient() as client:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å
        for service_name, port in PORTS.items():
            try:
                if service_name == "gigachat_init":
                    # –î–ª—è gigachat_init –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
                    response = await client.get(f"{BASE_URL}:{port}/token/", timeout=10.0)
                elif service_name == "google_sheets":
                    # –î–ª—è google_sheets –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ docs (FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç /docs)
                    response = await client.get(f"{BASE_URL}:{port}/docs", timeout=10.0) 
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±—É–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å
                    response = await client.get(f"{BASE_URL}:{port}/docs", timeout=10.0)
                
                if response.status_code < 500:
                    services_status[service_name] = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    services_status[service_name] = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}"
                    
            except Exception as e:
                services_status[service_name] = f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({str(e)[:30]}...)"
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    all_ok = True
    for service_name, status in services_status.items():
        print(f"   {service_name:20} (:{PORTS[service_name]}) - {status}")
        if not status.startswith("‚úÖ"):
            all_ok = False
    
    if not all_ok:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã.")
        print(f"   –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
        return False
    
    print(f"\n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é...")
    return True

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.
    """
    print("üöÄ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    if not await check_services_health():
        return
    
    # –®–∞–≥ 1: –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    row_id = await simulate_google_sheets_data_receive()
    if not row_id:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å row_id. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é.")
        return
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    await asyncio.sleep(1)
    
    # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É
    llm_started = await simulate_llm_processing_start(row_id)
    if not llm_started:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å LLM –æ–±—Ä–∞–±–æ—Ç–∫—É. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é.")
        return
    
    # –®–∞–≥ 3: –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_completed = await check_processing_status(row_id)
    
    # –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if processing_completed:
        await get_final_results(row_id)
    
    # –®–∞–≥ 5: –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ LLM
    await asyncio.sleep(2)
    await simulate_direct_llm_call()
    
    print(f"\n{'='*60}")
    print("üéâ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"{'='*60}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é
    asyncio.run(main())