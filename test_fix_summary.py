#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è summary –≤ fetch_subchapter_text.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

def test_new_fetch_subchapter_text():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é fetch_subchapter_text."""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò FETCH_SUBCHAPTER_TEXT")
    print("="*60)
    
    try:
        from src.llm_search_and_answer.services import fetch_subchapter_text
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–¥–≥–ª–∞–≤–µ 2.4.12
        test_subchapter = "2.4.12"
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–ª–∞–≤—É: {test_subchapter}")
        
        result = fetch_subchapter_text(test_subchapter)
        
        print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ summary —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å
        if "<summary>" in result and "</summary>" in result:
            start = result.find("<summary>") + 9
            end = result.find("</summary>")
            summary_content = result[start:end].strip()
            
            if summary_content and summary_content != "" and len(summary_content) > 10:
                print(f"‚úÖ Summary –Ω–∞–π–¥–µ–Ω: {len(summary_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üìù –ù–∞—á–∞–ª–æ summary: {summary_content[:100]}...")
            else:
                print(f"‚ùå Summary –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: '{summary_content}'")
        else:
            print(f"‚ùå –¢–µ–≥–∏ <summary> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"\nüìÑ –ü–û–õ–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("-" * 50)
        print(result)
        print("-" * 50)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_pipeline_with_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º."""
    print(f"\nüöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú")
    print("="*60)
    
    try:
        from src.llm_search_and_answer.services import run_full_reasoning_pipeline
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        test_question = """
        –í–æ–ø—Ä–æ—Å: –ü–æ—á–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω–∞–∑–æ–≤–∏—Ç–µ 4 —É—Ä–æ–∫–∞ –æ –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ–≤–æ—Ä–∏—Ç –∞–≤—Ç–æ—Ä.
        –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –£—Ä–æ–∫ –ø–µ—Ä–≤—ã–π: –Ω–µ –∫–∞–∂–¥—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. 
        """
        
        print("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω...")
        result = run_full_reasoning_pipeline(test_question)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        combined_content = result.get('combined_final_content', '')
        
        print(f"üìä –î–ª–∏–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(combined_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—É—Å—Ç—ã—Ö summary
        summary_count = 0
        empty_summary_count = 0
        
        # –ò—â–µ–º –≤—Å–µ summary –±–ª–æ–∫–∏
        import re
        summary_matches = re.findall(r'<summary>(.*?)</summary>', combined_content, re.DOTALL)
        
        for summary in summary_matches:
            clean_summary = summary.strip()
            if clean_summary and len(clean_summary) > 10:
                summary_count += 1
            else:
                empty_summary_count += 1
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö summary: {summary_count}")
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—É—Å—Ç—ã—Ö summary: {empty_summary_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ summary
        if summary_matches:
            first_summary = summary_matches[0].strip()
            if first_summary:
                print(f"üìù –ü—Ä–∏–º–µ—Ä summary: {first_summary[:150]}...")
        
        if summary_count > 0:
            print("üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! Summary –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
        else:
            print("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢! Summary –≤—Å–µ –µ—â–µ –ø—É—Å—Ç—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        test_new_fetch_subchapter_text()
        test_pipeline_with_fix()
        
        print("\n" + "="*60)
        print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()