#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–≥–ª–∞–≤ –¥–ª—è LLM –ø–∞–π–ø–ª–∞–π–Ω–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–ª–∞–≤ –∏ —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞.

–ó–∞–ø—É—Å–∫: python tests/test_subchapters_pipeline.py
"""

import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from src.config import settings
from src.llm_search_and_answer.services import (
    fetch_subchapter_text, 
    run_full_reasoning_pipeline
)
from src.utils.logger import get_logger

logger = get_logger("subchapters_test")

class SubchaptersTestResult:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self):
        self.success = True
        self.errors = []
        self.warnings = []
        self.subchapters_data = {}
        
    def add_error(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –∏ –ø–æ–º–µ—á–∞–µ—Ç —Ç–µ—Å—Ç –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π."""
        self.errors.append(message)
        self.success = False
        logger.error(message)
        
    def add_warning(self, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å)."""
        self.warnings.append(message)
        logger.warning(message)
        
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        print("\n" + "="*60)
        print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–ì–õ–ê–í")
        print("="*60)
        
        if self.success:
            print("‚úÖ –°–¢–ê–¢–£–°: –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û")
        else:
            print("‚ùå –°–¢–ê–¢–£–°: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò")
            
        print(f"\n–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–¥–≥–ª–∞–≤: {len(settings.available_subchapters)}")
        print(f"–ü–æ–¥–≥–ª–∞–≤—ã: {', '.join(settings.available_subchapters)}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for i, error in enumerate(self.errors, 1):
                print(f"  {i}. {error}")
                
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for i, warning in enumerate(self.warnings, 1):
                print(f"  {i}. {warning}")
                
        print("\n" + "="*60)

def test_subchapter_availability(result: SubchaptersTestResult):
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ–¥–≥–ª–∞–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞."""
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–¥–≥–ª–∞–≤...")
    
    for subchapter in settings.available_subchapters:
        try:
            content = fetch_subchapter_text(subchapter)
            
            if not content or len(content.strip()) < 50:
                result.add_warning(f"–ü–æ–¥–≥–ª–∞–≤–∞ {subchapter} —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                result.subchapters_data[subchapter] = len(content)
                print(f"  ‚úÖ {subchapter}: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
        except Exception as e:
            result.add_error(f"–ü–æ–¥–≥–ª–∞–≤–∞ {subchapter} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(e)}")

def test_context_size(result: SubchaptersTestResult):
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    total_chars = sum(result.subchapters_data.values())
    total_kb = total_chars / 1024
    
    print(f"  üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {total_chars} —Å–∏–º–≤–æ–ª–æ–≤ ({total_kb:.1f} KB)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    if total_chars < 1000:
        result.add_warning("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π - –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è LLM")
    elif total_chars > 50000:
        result.add_warning("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π - –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã LLM –º–æ–¥–µ–ª–∏")
    else:
        print("  ‚úÖ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –Ω–æ—Ä–º–µ")

def test_pipeline_execution(result: SubchaptersTestResult):
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã LLM –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    test_question = """
    –í–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π –≤—Ä–µ–¥ –≥–Ω–µ–≤–∞ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –º–Ω–µ–Ω–∏—é –∞–≤—Ç–æ—Ä–∞?.
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ì–ª–∞–≤–Ω—ã–µ –≤—Ä–µ–¥ –≥–Ω–µ–≤–∞ –≤ —Ç–æ–º —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ç–µ—Ä—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–µ–Ω—è—Ç—å—Å—è!.
    """
    
    try:
        pipeline_result = run_full_reasoning_pipeline(test_question)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['selected_subchapters', 'combined_final_content', 'final_answer']
        for field in required_fields:
            if field not in pipeline_result:
                result.add_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}' –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–∞–π–ø–ª–∞–π–Ω–∞")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
        final_answer = pipeline_result.get('final_answer', '')
        if not final_answer or len(final_answer) < 50:
            result.add_error("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
        elif '–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:' not in final_answer:
            result.add_warning("–û—Ç–≤–µ—Ç LLM –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π")
        else:
            print(f"  ‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {len(final_answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        print(f"  üìù –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ LLM: {final_answer[:1000]}...")
        
    except Exception as e:
        result.add_error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}")

def test_config_validation(result: SubchaptersTestResult):
    """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    subchapters = settings.available_subchapters
    
    if not subchapters:
        result.add_error("–°–ø–∏—Å–æ–∫ –ø–æ–¥–≥–ª–∞–≤ –ø—É—Å—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
        
    if len(subchapters) < 2:
        result.add_warning("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø–æ–¥–≥–ª–∞–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2-3 –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    elif len(subchapters) > 10:
        result.add_warning("–ú–Ω–æ–≥–æ –ø–æ–¥–≥–ª–∞–≤ - –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞")
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–¥–≥–ª–∞–≤
    for subchapter in subchapters:
        if not isinstance(subchapter, str):
            result.add_error(f"–ù–æ–º–µ—Ä –ø–æ–¥–≥–ª–∞–≤—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π: {subchapter}")
        elif not ('.' in subchapter and len(subchapter.split('.')) >= 3):
            result.add_warning(f"–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –ø–æ–¥–≥–ª–∞–≤—ã: {subchapter}")
            
    print(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(subchapters)} –ø–æ–¥–≥–ª–∞–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–î–ì–õ–ê–í LLM –ü–ê–ô–ü–õ–ê–ô–ù–ê")
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {settings.available_subchapters}")
    
    result = SubchaptersTestResult()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    test_config_validation(result)
    test_subchapter_availability(result)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if not result.success:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞")
        result.print_summary()
        return
        
    test_context_size(result)
    test_pipeline_execution(result)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    result.print_summary()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if result.success else 1)

if __name__ == "__main__":
    main()