#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ summary —Å—Ç—Ä–∞–Ω–∏—Ü.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from src.book_parser.config import settings as book_settings
from src.book_parser.parsers.page_content_parser import PageContentParser

def check_raw_data_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª–∞—Ö."""
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–°–•–û–î–ù–´–• –î–ê–ù–ù–´–•")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º know_map_full.json
    know_map_path = Path(book_settings.know_map_path)
    kniga_path = Path(book_settings.kniga_path)
    
    print(f"üìÅ Know map —Ñ–∞–π–ª: {know_map_path}")
    print(f"üìÅ Kniga —Ñ–∞–π–ª: {kniga_path}")
    
    if not know_map_path.exists():
        print(f"‚ùå –§–∞–π–ª {know_map_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if not kniga_path.exists():
        print(f"‚ùå –§–∞–π–ª {kniga_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(know_map_path, 'r', encoding='utf-8') as f:
        know_map_data = json.load(f)
    
    with open(kniga_path, 'r', encoding='utf-8') as f:
        kniga_data = json.load(f)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É kniga –¥–∞–Ω–Ω—ã—Ö
    print("\nüìñ –°–¢–†–£–ö–¢–£–†–ê KNIGA –î–ê–ù–ù–´–•:")
    book_data = kniga_data.get("book", {})
    pages = book_data.get("pages", [])
    
    print(f"  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(pages)}")
    
    if pages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        first_page = pages[0]
        print(f"  –ü–æ–ª—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {list(first_page.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ summary –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        pages_with_summary = 0
        pages_with_empty_summary = 0
        
        for i, page in enumerate(pages[:10]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–∞–Ω–∏—Ü
            if 'summary' in page:
                summary = page.get('summary', '')
                if summary and summary.strip():
                    pages_with_summary += 1
                else:
                    pages_with_empty_summary += 1
        
        print(f"  –°—Ç—Ä–∞–Ω–∏—Ü —Å –Ω–µ–ø—É—Å—Ç—ã–º summary (–∏–∑ –ø–µ—Ä–≤—ã—Ö 10): {pages_with_summary}")
        print(f"  –°—Ç—Ä–∞–Ω–∏—Ü —Å –ø—É—Å—Ç—ã–º summary (–∏–∑ –ø–µ—Ä–≤—ã—Ö 10): {pages_with_empty_summary}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if len(pages) > 0:
            example_page = pages[0]
            print(f"\n  –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            print(f"    pageNumber: {example_page.get('pageNumber')}")
            print(f"    content –¥–ª–∏–Ω–∞: {len(str(example_page.get('content', '')))}")
            print(f"    summary: '{example_page.get('summary', '–ù–ï–¢ –ü–û–õ–Ø')}'")
    
    return know_map_data, kniga_data

def check_parser_processing(know_map_data, kniga_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫ –ø–∞—Ä—Å–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–≥–ª–∞–≤—ã."""
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ –ü–ê–†–°–ï–†–ê")
    print("="*50)
    
    # –ë–µ—Ä–µ–º –ø–æ–¥–≥–ª–∞–≤—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_subchapter = "2.4.12"
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–ª–∞–≤—É: {test_subchapter}")
    
    parser = PageContentParser(know_map_data, kniga_data)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–¥–≥–ª–∞–≤—ã
    page_numbers, subchapter_title = parser.get_pages_for_subchapter(test_subchapter)
    print(f"  üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_numbers}")
    print(f"  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥–≥–ª–∞–≤—ã: '{subchapter_title}'")
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    pages_data = kniga_data.get("book", {}).get("pages", [])
    
    print(f"\n  üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–†–ê–ù–ò–¶:")
    for page in pages_data:
        page_num = page.get("pageNumber")
        if page_num in page_numbers:
            content_len = len(str(page.get("content", "")))
            summary = page.get("summary", "")
            
            print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}:")
            print(f"      content: {content_len} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      summary: '{summary}' (–¥–ª–∏–Ω–∞: {len(summary)})")
            print(f"      summary –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {'summary' in page}")
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞
    result = parser.parse_final_content(test_subchapter)
    print(f"\n  üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ê–†–°–ï–†–ê:")
    print(f"    –ó–∞–≥–æ–ª–æ–≤–æ–∫: '{result.subchapter_title}'")
    print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(result.pages)}")
    
    for page_meta in result.pages:
        print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_meta.page_number}:")
        print(f"      content: {len(page_meta.content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"      summary: '{page_meta.summary}' (–¥–ª–∏–Ω–∞: {len(page_meta.summary)})")

def check_api_response():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API –û–¢–í–ï–¢–ê")
    print("="*50)
    
    try:
        import httpx
        from src.config import settings as port_settings
        
        test_subchapter = "2.4.12"
        url = f"http://127.0.0.1:{port_settings.book_parser_port}/parser/subchapters/{test_subchapter}/content"
        
        print(f"üåê –ó–∞–ø—Ä–æ—Å –∫ API: {url}")
        
        response = httpx.get(url, verify=False)
        response.raise_for_status()
        
        data = response.json()
        
        print(f"  ‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"  üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys())}")
        
        content_data = data.get("content", {})
        pages = content_data.get("pages", [])
        
        print(f"  üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ—Ç–≤–µ—Ç–µ: {len(pages)}")
        
        for page in pages:
            print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page.get('page_number')}:")
            print(f"      summary: '{page.get('summary')}' (–¥–ª–∏–Ω–∞: {len(page.get('summary', ''))})")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° SUMMARY")
    print("="*60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        know_map_data, kniga_data = check_raw_data_structure()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞
        check_parser_processing(know_map_data, kniga_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—Ç–≤–µ—Ç
        check_api_response()
        
        print("\n" + "="*60)
        print("üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≥–¥–µ —Ç–µ—Ä—è—é—Ç—Å—è summary –¥–∞–Ω–Ω—ã–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()