# quick_log_test.py
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.

–ó–∞–ø—É—Å–∫: python quick_log_test.py
"""

import time
from src.utils.logger import get_logger

def test_logging_system():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
    """
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services = [
        "main",
        "book_parser", 
        "gigachat_init",
        "google_sheets",
        "llm_service"
    ]
    
    loggers = {}
    for service in services:
        loggers[service] = get_logger(service)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω—ã –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è {len(services)} —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"\nüìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    for i, (service, logger) in enumerate(loggers.items(), 1):
        print(f"\n--- –°–µ—Ä–≤–∏—Å {i}/{len(services)}: {service} ---")
        
        # DEBUG —É—Ä–æ–≤–µ–Ω—å
        logger.debug(f"[DEBUG] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ {service}")
        
        # INFO —É—Ä–æ–≤–µ–Ω—å  
        logger.info(f"[INFO] –°–µ—Ä–≤–∏—Å {service} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # WARNING —É—Ä–æ–≤–µ–Ω—å
        if service == "gigachat_init":
            logger.warning(f"[WARNING] –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
        elif service == "book_parser":
            logger.warning(f"[WARNING] –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∫–Ω–∏–≥–∏: 15MB")
        elif service == "google_sheets":
            logger.warning(f"[WARNING] –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5 —Ñ–æ—Ä–º")
        elif service == "llm_service":
            logger.warning(f"[WARNING] –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ LLM —Å–µ—Ä–≤–∏—Å")
        else:
            logger.warning(f"[WARNING] –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è {service}")
        
        # ERROR —É—Ä–æ–≤–µ–Ω—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        if service == "llm_service":
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat API")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        time.sleep(0.5)
    
    print(f"\nüéØ –°–∏–º—É–ª—è—Ü–∏—è —Ç–∏–ø–∏—á–Ω–æ–≥–æ workflow:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    main_logger = loggers["main"]
    book_logger = loggers["book_parser"]
    gigachat_logger = loggers["gigachat_init"]
    sheets_logger = loggers["google_sheets"]
    llm_logger = loggers["llm_service"]
    
    main_logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã")
    
    sheets_logger.debug("–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã row_123")
    sheets_logger.info("–§–æ—Ä–º–∞ row_123 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å 3 –ø–∞—Ä–∞–º–∏ Q&A")
    
    gigachat_logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ GigaChat")
    gigachat_logger.info("–¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë 45 –º–∏–Ω")
    
    llm_logger.info("–ó–∞–ø—É—Å–∫ LLM –ø–∞–π–ø–ª–∞–π–Ω–∞")
    
    book_logger.debug("–ó–∞–≥—Ä—É–∑–∫–∞ JSON: know_map_full.json")
    book_logger.info("–ü–æ–ª—É—á–µ–Ω–æ 5 –ø–æ–¥–≥–ª–∞–≤")
    
    llm_logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–¥–≥–ª–∞–≤–∞ 3.11.1")
    llm_logger.debug("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ–¥–≥–ª–∞–≤–∞ 3.11.2") 
    llm_logger.info("LLM –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    sheets_logger.info("–§–æ—Ä–º–∞ row_123 –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (2/2)")
    
    main_logger.info("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: logs/")
    print(f"üîß –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env:")
    print(f"   LOG_MODE=development (–ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏)")
    print(f"   LOG_MODE=production (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)")

if __name__ == "__main__":
    test_logging_system()