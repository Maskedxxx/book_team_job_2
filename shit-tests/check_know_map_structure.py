#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã know_map_full.json 
–∏ –ø–æ–∏—Å–∫–∞ –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è summary —Å—Ç—Ä–∞–Ω–∏—Ü.
"""

import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from src.book_parser.config import settings as book_settings

def analyze_know_map_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É know_map_full.json."""
    print("üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ KNOW_MAP_FULL.JSON")
    print("="*60)
    
    know_map_path = Path(book_settings.know_map_path)
    
    with open(know_map_path, 'r', encoding='utf-8') as f:
        know_map_data = json.load(f)
    
    print("üìÇ –û–°–ù–û–í–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:")
    print(f"  –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(know_map_data.keys())}")
    
    # –ò–¥–µ–º –≤–≥–ª—É–±—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    content = know_map_data.get("content", {})
    print(f"  –ö–ª—é—á–∏ –≤ 'content': {list(content.keys())}")
    
    parts = content.get("parts", [])
    print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(parts)}")
    
    if parts:
        first_part = parts[0]
        print(f"  –ö–ª—é—á–∏ –≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏: {list(first_part.keys())}")
        
        chapters = first_part.get("chapters", [])
        if chapters:
            first_chapter = chapters[0]
            print(f"  –ö–ª—é—á–∏ –≤ –ø–µ—Ä–≤–æ–π –≥–ª–∞–≤–µ: {list(first_chapter.keys())}")
            
            subchapters = first_chapter.get("subchapters", [])
            if subchapters:
                first_subchapter = subchapters[0]
                print(f"  –ö–ª—é—á–∏ –≤ –ø–µ—Ä–≤–æ–π –ø–æ–¥–≥–ª–∞–≤–µ: {list(first_subchapter.keys())}")

def find_summary_in_know_map():
    """–ò—â–µ—Ç –≥–¥–µ –≤ know_map —Ö—Ä–∞–Ω—è—Ç—Å—è summary —Å—Ç—Ä–∞–Ω–∏—Ü."""
    print("\nüîç –ü–û–ò–°–ö SUMMARY –í KNOW_MAP")
    print("="*50)
    
    know_map_path = Path(book_settings.know_map_path)
    
    with open(know_map_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    # –ò—â–µ–º –ø–æ–¥–≥–ª–∞–≤—É 2.4.12 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_subchapter = "2.4.12"
    
    def search_recursive(obj, path=""):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö."""
        if isinstance(obj, dict):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ –ø–æ–¥–≥–ª–∞–≤–∞ –∫–æ—Ç–æ—Ä—É—é –º—ã –∏—â–µ–º
            if obj.get("subchapter_number") == test_subchapter:
                print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–ê –ü–û–î–ì–õ–ê–í–ê {test_subchapter} –ø–æ –ø—É—Ç–∏: {path}")
                print(f"  –ö–ª—é—á–∏ –≤ –ø–æ–¥–≥–ª–∞–≤–µ: {list(obj.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
                pages = obj.get("pages", [])
                print(f"  –°—Ç—Ä–∞–Ω–∏—Ü—ã: {pages}")
                
                # –ò—â–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å summary
                for key, value in obj.items():
                    if "summary" in key.lower() or "content" in key.lower():
                        print(f"  –ü–æ–ª–µ '{key}': {str(value)[:100]}...")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ pages_content –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ
                if "pages_content" in obj:
                    pages_content = obj["pages_content"]
                    print(f"  üìÑ pages_content —Ç–∏–ø: {type(pages_content)}")
                    if isinstance(pages_content, dict):
                        print(f"  üìÑ pages_content –∫–ª—é—á–∏: {list(pages_content.keys())}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü 47, 48
                        for page_num in [47, 48]:
                            page_key = str(page_num)
                            if page_key in pages_content:
                                page_data = pages_content[page_key]
                                print(f"    –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: {list(page_data.keys()) if isinstance(page_data, dict) else type(page_data)}")
                                if isinstance(page_data, dict) and "summary" in page_data:
                                    summary = page_data["summary"]
                                    print(f"      summary: '{summary[:100]}...'")
                
                return True
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
            for key, value in obj.items():
                if search_recursive(value, f"{path}.{key}" if path else key):
                    return True
                    
        elif isinstance(obj, list):
            for i, item in enumerate(obj):
                if search_recursive(item, f"{path}[{i}]"):
                    return True
        
        return False
    
    found = search_recursive(data)
    if not found:
        print(f"‚ùå –ü–æ–¥–≥–ª–∞–≤–∞ {test_subchapter} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ know_map")

def check_all_subchapters_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö –ø–æ–¥–≥–ª–∞–≤ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Ö—Ä–∞–Ω–µ–Ω–∏—è summary."""
    print("\nüîç –°–¢–†–£–ö–¢–£–†–ê –í–°–ï–• –ü–û–î–ì–õ–ê–í")
    print("="*50)
    
    know_map_path = Path(book_settings.know_map_path)
    
    with open(know_map_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    subchapters_found = []
    
    def find_subchapters(obj):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–≥–ª–∞–≤—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É."""
        if isinstance(obj, dict):
            if "subchapter_number" in obj:
                subchapter_num = obj["subchapter_number"]
                subchapters_found.append({
                    "number": subchapter_num,
                    "keys": list(obj.keys()),
                    "has_pages": "pages" in obj,
                    "has_pages_content": "pages_content" in obj,
                    "pages": obj.get("pages", [])
                })
            
            for value in obj.values():
                find_subchapters(value)
                
        elif isinstance(obj, list):
            for item in obj:
                find_subchapters(item)
    
    find_subchapters(data)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–≥–ª–∞–≤: {len(subchapters_found)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    for i, subchapter in enumerate(subchapters_found[:5]):
        print(f"\n  {i+1}. –ü–æ–¥–≥–ª–∞–≤–∞ {subchapter['number']}:")
        print(f"     –ö–ª—é—á–∏: {subchapter['keys']}")
        print(f"     –ï—Å—Ç—å pages: {subchapter['has_pages']}")
        print(f"     –ï—Å—Ç—å pages_content: {subchapter['has_pages_content']}")
        if subchapter['pages']:
            print(f"     –°—Ç—Ä–∞–Ω–∏—Ü—ã: {subchapter['pages']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞."""
    try:
        analyze_know_map_structure()
        find_summary_in_know_map()
        check_all_subchapters_structure()
        
        print("\n" + "="*60)
        print("üéØ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print("–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º –≥–¥–µ –∏—Å–∫–∞—Ç—å summary –≤ know_map_full.json")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()